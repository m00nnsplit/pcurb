#!/usr/bin/python3
import praw
import curses
import textwrap # needed for properly presenting paragraphs
from sys import argv, stdout, stderr
from datetime import datetime # for parsing timestamps
from os import getcwd # used for the help message
from time import sleep # to pause when selecting things
import re # regular expressions useful for things
from warnings import filterwarnings
filterwarnings("ignore", category=ResourceWarning)
# We get a warning because the SSL connection is not closed, but according to the PRAW people this is intentional, since the garbage collector takes care of it apparently

# structure is the same as in my ncurses labyrinth game
# we're doing argument processing inside main and reply depending on what main returns
# for now no arguments, we just start up in interactive mode

# attributes :
# defaultSub
# nbSubsPerPage
# commentTreeLength
class Config :
	def __init__(self, fileName="pcurb.cfg") :
		self.defaultSub="announcements"
		self.nbSubsPerPage=25
		self.commentTreeLength=5
		self.commentUserFlairMaxLength=25
		try :
			fileStream=open(fileName)
			for workingLine in fileStream.readlines() :
				workingLine = workingLine.replace(" ", "")
				workingLine = workingLine.replace("\n", "")
				workingLine = workingLine.replace("\r", "")
				words=workingLine.split("=")
				if workingLine  == "" :
					pass
				elif workingLine[0]=="#" :
					pass
				elif words[0]=="defaultSub" :
					self.defaultSub=words[1]
				elif words[0]=="nbSubsPerPage" :
					if int(words[1])>0:
						self.nbSubsPerPage=int(words[1])
				elif words[0]=="commentTreeLength" :
					if int(words[1])>=0 :
						self.commentTreeLength=int(words[1])
				elif words[0]=="commentUserFlairMaxLength" :
					if int(words[1])>1:
						self.commentUserFlairMaxLength=int(words[1])

		except OSError as readError :
			self.defaultSub="learnPython"

global config


# for recursivly displaying comment trees
def displayReply(commentsPad, screenMaxX, leapLines, comment, commentLevel, desiredLevel) :
	if not isinstance(comment, praw.objects.Comment):
		commentsPad.addstr(leapLines, commentLevel*2, "[More Comments]")
		return leapLines+1

	global config
	
	wrapper=textwrap.TextWrapper(width=(screenMaxX-1-(commentLevel*2)))

	# flair management
	theFlair=""
	"""	
	important note : lazy objects mean 2 seconds every time we access a member of a comment.author object..
	not really feasible

	So as far as I can say, no way to add [A] and [M]
	"""
	
	if comment.stickied :
		commentInfo = "STIC "
	else:
		commentInfo = "---- "

	commentInfo +=str(comment.score)+" : "+str(comment.author)

	if comment.is_submitter :
		theFlair+="[OP]"
	# It seems that trying to access the lazy object comment.author results in problems
	#if comment.author.is_employee :
	#	theFlair+="[A]"
	#if comment.author.is_mod :
	#	theFlair+="[M]"
	try:
		# size is limited by screen size and config, whichever is smaller
		maxFlairSize = min(config.commentUserFlairMaxLength, screenMaxX-(commentLevel*2+len(commentInfo)))
		if (len(comment.author_flair_text)>maxFlairSize):
			theFlair+="["+comment.author_flair_text[:config.commentUserFlairMaxLength-2]+"..]"
		else :
			theFlair+="["+comment.author_flair_text+"]"
	except TypeError: #no flair
		pass

	commentInfo+=theFlair
	commentsPad.addstr(leapLines, commentLevel*2, commentInfo)

	leapLines=leapLines+1
	for i in str.splitlines(comment.body) :
		for j in wrapper.wrap(i) :
			commentsPad.addstr(leapLines, commentLevel*2,j)
			leapLines=leapLines+1
	if desiredLevel>commentLevel :
		for k in comment.replies :
			leapLines=displayReply(commentsPad, screenMaxX, leapLines+1, k, commentLevel+1, desiredLevel)
	return leapLines


# when a submission is opened, this function opens a new window and generates everything inside
def displayComments(standardScreen, screenMaxY, screenMaxX, reddit, submissionToOpen, titleWin=None, submissionsPad=None, currentSubreddit=None, submissionsNumberLimit=None, subMode=None):
	# we open a new window with the contents of the submission

	yCoordComments = 0
	xCoordComments = 0
	
	if submissionsPad != None:
		submissionsPad.erase()
	commentsPad = curses.newpad(200*100, screenMaxX+1) #200 is the max number of comments reddit loads at once and 100 is what I hope is the mean number or lines they'll take
	#for i in range(int(submissionToOpen)+1) :
	#	submissionWeAreLookingAt = next(submissions)

	# opening an URL is no more harmful than opening a lazy object, and it allows us to handily open URLs
	submissionWeAreLookingAt = reddit.get_submission(url=submissionToOpen)


	leapLines = 0
	wrapper=textwrap.TextWrapper(width=screenMaxX-1)#, drop_whitespace=False)#replace_whitespace=False)
	#TODO:replace_whitespace eats words, the textwrap doc suggests use of str.splitlines()

	try:
		subText = "["+submissionWeAreLookingAt.link_flair_text+"]"+submissionWeAreLookingAt.title
	except TypeError: #no flair
		subText = submissionWeAreLookingAt.title

	for l in wrapper.wrap(subText) :
		commentsPad.addstr(leapLines,0, l)
		leapLines=leapLines+1

	leapLines=leapLines+1
	commentsPad.addstr(leapLines,0,"Score: "+str(submissionWeAreLookingAt.score)+", Comments:  "+str(submissionWeAreLookingAt.num_comments)+". Submitted "+str(datetime.fromtimestamp(submissionWeAreLookingAt.created))+".")
	leapLines=leapLines+1

	try :
		commentsPad.addstr(leapLines,0, "By "+str(submissionWeAreLookingAt.author)+"["+submissionWeAreLookingAt.author_flair_text+"]")
	except TypeError : # no flair
		commentsPad.addstr(leapLines,0, "By "+str(submissionWeAreLookingAt.author))

	leapLines=leapLines+1

	if submissionWeAreLookingAt.stickied:
		leapLines+=1
		commentsPad.addstr(leapLines, 0, "STICKIED")
		leapLines+=1
	
	leapLines+=1

	commentsPad.addstr(leapLines,0,"Permalink: "+submissionWeAreLookingAt.permalink[:screenMaxX-1-len("Permalink: ")])
	for l in wrapper.wrap(submissionWeAreLookingAt.permalink[screenMaxX-1-len("Permalink: "):]) :
		leapLines=leapLines+1
		commentsPad.addstr(leapLines,0,l)

	leapLines=leapLines+2


	commentLevel=0

	if submissionWeAreLookingAt.selftext=="" : # no text
		if submissionWeAreLookingAt.permalink != submissionWeAreLookingAt.url :
			#hopefully, this should filter out textless self posts
			commentsPad.addstr(leapLines,0,"Linking to: "+submissionWeAreLookingAt.url[:screenMaxX-1-len("Linking to: ")])
			for l in wrapper.wrap(submissionWeAreLookingAt.url[screenMaxX-1-len("Linking to: "):]) :
				leapLines=leapLines+1
				commentsPad.addstr(leapLines,0,l)
		else :
			commentsPad.addstr(leapLines,0,"[no text]")
		leapLines=leapLines+2

	else :
		for k in str.splitlines(submissionWeAreLookingAt.selftext) :
			for l in wrapper.wrap(k) :
				commentsPad.addstr(leapLines, 0, l)
				leapLines=leapLines+1
	leapLines=leapLines+1

	for i in submissionWeAreLookingAt.comments :
		try :
			leapLines=displayReply(commentsPad, screenMaxX, leapLines, i, commentLevel, 3)
			leapLines=leapLines+1 #let's skip one more
		except AttributeError :
		#it's a MoreComments
			leapLines=leapLines+1 
	commentsPad.addstr(leapLines+2,0,"== End of comments ==");#TODO: find a better way to prevent user scrolling into the abyss
	commentsPad.refresh(yCoordComments,0,3,1,screenMaxY-1,screenMaxX-1)
	if titleWin != None :
		titleWin.addstr(1,screenMaxX-16, "               ")
		titleWin.refresh()
	
	while True :
		standardScreen.refresh()
		if titleWin != None :
			commentsPad.refresh(yCoordComments,0,3,1,screenMaxY-1,screenMaxX-1)
		else:
			commentsPad.refresh(yCoordComments,0,0,1,screenMaxY-1,screenMaxX-1)

		userInput = standardScreen.getch()

		if userInput == curses.KEY_DOWN or userInput == ord('j') or userInput == ord('J') :
			if yCoordComments< (200*100 - screenMaxY-1) :
				yCoordComments = yCoordComments+1
		elif userInput == curses.KEY_UP or userInput == ord('k') or userInput == ord('K'):
			if yCoordComments>0 :
				yCoordComments = yCoordComments-1

		elif userInput == curses.KEY_PPAGE : #page up
			if (yCoordComments-(screenMaxY-3))>=0 :
				yCoordComments = yCoordComments-(screenMaxY-3)+3
			else :
				yCoordComments = 0;
		elif userInput == curses.KEY_NPAGE : #page down
			if (yCoordComments+(screenMaxY-3))<(200*100-(screenMaxY-3)) :
				yCoordComments = yCoordComments+(screenMaxY-3)-3

		elif userInput == ord('q') or userInput==ord('Q') :
			break



# presents a window of options (hot, best, top, etc..) and returns what was selected
def selectMode(standardScreen, screenMaxY, screenMaxX) :
	text = [
	"        Type and press Enter:",
	"[0] hot       [1] new       [2] rising",
	"                                    ",
	"[3] top (hr)  [4] top (dy)  [5] top (wk)",
	"[6] top (mn)  [7] top (yr)  [8] top (al)" ,
	"                                    ",
	"[9] con (hr)  [10] con (dy) [11] con (wk)",
	"[12] con (mn) [13] con (yr) [14] con (al)"]
	
	smallWin = standardScreen.subwin(10,43,int(screenMaxY/2)-3,int(screenMaxX/2)-20)
	smallWin.border();
	smallWin.addstr(1,1,text[0])
	smallWin.addstr(2,1,text[1])
	smallWin.addstr(3,1,text[2])
	smallWin.addstr(4,1,text[3])
	smallWin.addstr(5,1,text[4])
	smallWin.addstr(6,1,text[5])
	smallWin.addstr(7,1,text[6])
	smallWin.addstr(8,1,text[7])
	smallWin.refresh()

	try:
		inp = int(standardScreen.getstr());
		if inp == 0:
			return "hot"
		elif inp == 1:
			return "new"
		elif inp == 2:
			return "rising"

		elif inp == 3:
			return "top-hr"
		elif inp == 4:
			return "top-dy"
		elif inp == 5:
			return "top-wk"
		elif inp == 6:
			return "top-mn"
		elif inp == 7:
			return "top-yr"
		elif inp == 8:
			return "top-al"

		elif inp == 9:
			return "con-hr"
		elif inp == 10:
			return "con-dy"
		elif inp == 11:
			return "con-wk"
		elif inp == 12:
			return "con-mn"
		elif inp == 13:
			return "con-yr"
		elif inp == 14:
			return "con-al"

		else:
			return "error"+str(inp)
	except ValueError:
		return "error"


def main(standardScreen, reddit) :
	#TODO : use the Config class and the pcurb.cfg file

	global config
	config = Config()

	subMode = "hot"
	# no arguments -> interactive mode
	if len(argv) > 1 : # n°0 is executable, obv
		argno=1
		while argno < len(argv) :

			if argv[argno] == 'help' or argv[argno] == 'h' or argv[argno] == '-h' :
				return 'help'

			elif argv[argno] == '--sort' or argv[argno] == '-s' :
				subMode = argv[argno+1]
				argno+=1
			else :
				currentSubreddit = argv[1]
				if "." in currentSubreddit :
					patternURL = re.compile("^.*\.reddit\.com.*$")
					if patternURL.match(currentSubreddit):
						try:
							# space is intentional
							# kind of duct tapey but hey
							standardScreen.addstr(" Loading direct submission URL..")
							curses.curs_set(0) # invisible cursor
							standardScreen.refresh()
							s = reddit.get_submission(currentSubreddit)
							screenMaxY, screenMaxX = standardScreen.getmaxyx()
							displayComments(standardScreen, screenMaxY, screenMaxX, reddit, currentSubreddit)
							return None
						except Exception as e:
							return "Identified "+currentSubreddit+" as a submission URL, but something went wrong:\n"+e.message

					else:
						currentSubreddit = config.defaultSub

			argno+=1
			
	else :
		currentSubreddit = config.defaultSub

	curses.curs_set(False)
	curses.use_default_colors()
	screenMaxY, screenMaxX = standardScreen.getmaxyx()
	standardScreen.clear()

	submissionsNumberLimit = config.nbSubsPerPage

	yCoord = 0

	# titleWin displays current subreddit
	titleWin = standardScreen.subwin(3, screenMaxX, 0,0)
	titleWin.border()

	titleWin.addstr(1,1, "Sub : "+currentSubreddit)

	titleWin.addstr(1,screenMaxX-8,subMode)

	submissionsPad = curses.newpad(submissionsNumberLimit*5+2, screenMaxX+1) #submissions number limit times lines per submission

	
	submissionsPad.addstr(0,0,"Fetching submissions..")
	standardScreen.refresh()
	submissionsPad.refresh(yCoord,0,3,1,screenMaxY-1,screenMaxX-1)

	submissions = reddit.get_subreddit(currentSubreddit).get_hot(limit=submissionsNumberLimit)

	needRepaint = True;
	
	wrapper=textwrap.TextWrapper(width=(screenMaxX-1))
	while True :


		if needRepaint:

			titleWin.addstr(1,screenMaxX-16,"               ")
			titleWin.addstr(1,screenMaxX-16,"Loading "+subMode)
			#I don't know why, but this seems needed
			#lazy objects maybe ? I'm too lazy to investigate
			if subMode == "hot":
				submissions = reddit.get_subreddit(currentSubreddit).get_hot(limit=submissionsNumberLimit)
			elif subMode == "rising": 
				submissions = reddit.get_subreddit(currentSubreddit).get_rising(limit=submissionsNumberLimit)
			elif subMode == "new": 
				submissions = reddit.get_subreddit(currentSubreddit).get_new(limit=submissionsNumberLimit)

			elif subMode == "top-hr": 
				submissions = reddit.get_subreddit(currentSubreddit).get_top_from_hour(limit=submissionsNumberLimit)
			elif subMode == "top-dy": 
				submissions = reddit.get_subreddit(currentSubreddit).get_top_from_day(limit=submissionsNumberLimit)
			elif subMode == "top-wk": 
				submissions = reddit.get_subreddit(currentSubreddit).get_top_from_week(limit=submissionsNumberLimit)
			elif subMode == "top-mn": 
				submissions = reddit.get_subreddit(currentSubreddit).get_top_from_month(limit=submissionsNumberLimit)
			elif subMode == "top-yr": 
				submissions = reddit.get_subreddit(currentSubreddit).get_top_from_year(limit=submissionsNumberLimit)
			elif subMode == "top-al": 
				submissions = reddit.get_subreddit(currentSubreddit).get_top_from_all(limit=submissionsNumberLimit)

			elif subMode == "con-hr": 
				submissions = reddit.get_subreddit(currentSubreddit).get_controversial_from_hour(limit=submissionsNumberLimit)
			elif subMode == "con-dy": 
				submissions = reddit.get_subreddit(currentSubreddit).get_controversial_from_day(limit=submissionsNumberLimit)
			elif subMode == "con-wk": 
				submissions = reddit.get_subreddit(currentSubreddit).get_controversial_from_week(limit=submissionsNumberLimit)
			elif subMode == "con-mn": 
				submissions = reddit.get_subreddit(currentSubreddit).get_controversial_from_month(limit=submissionsNumberLimit)
			elif subMode == "con-yr": 
				submissions = reddit.get_subreddit(currentSubreddit).get_controversial_from_year(limit=submissionsNumberLimit)
			elif subMode == "con-al": 
				submissions = reddit.get_subreddit(currentSubreddit).get_controversial_from_all(limit=submissionsNumberLimit)

			else :
				subMode = "hot"
				#TODO correct displayed subMode
				submissions = reddit.get_subreddit(currentSubreddit).get_hot(limit=submissionsNumberLimit)


			k=0
			subIndice = 0
			# like submissions, only in an array to access later
			currentSubmissions = []
			submissionsPad.clear()
			for subIter in submissions :
				currentSubmissions.append(subIter)
				if subIter.is_self :
					indiceSeparator = "]"
				else : 
					indiceSeparator = ")"

				subScore = str(subIter.score)
				if subIter.score > 999 :
					subScore=subScore[:-3]+"k"+subScore[-3]
					# reddit uses "45.7k", but using the kilo as a comma saves us a character
					# it's not uncommon

				subNumComments = str(subIter.num_comments)
				if subIter.num_comments > 999 :
					subNumComments=subNumComments[:-3]+"k"+subNumComments[-3]


				try:
					subText = str(subIndice)+indiceSeparator+" ["+subIter.link_flair_text+"]"+subIter.title +" ("+subScore+"pts|"+subNumComments+"coms)"
				except TypeError: #no flair
					subText = str(subIndice)+indiceSeparator+" "+subIter.title +" ("+subScore+"pts|"+subNumComments+"coms)"

				subHeightLines=0
				for l in wrapper.wrap(subText) :
					submissionsPad.addstr(k+subHeightLines,0,l)
					subHeightLines=subHeightLines+1


				submissionsPad.addstr(k+subHeightLines,0,'----------')
				k=k+subHeightLines+1
				subIndice=subIndice+1

			
			titleWin.addstr(1,screenMaxX-16,"               ")
			titleWin.addstr(1,screenMaxX-8,subMode)
			#TODO find better
			submissionsPad.addstr(k+1,0,"== End of submissions ==")
			needRepaint = False



		standardScreen.refresh()
		submissionsPad.refresh(yCoord,0,3,1,screenMaxY-1,screenMaxX-1)

		userInput = standardScreen.getch()

		if userInput == curses.KEY_DOWN or userInput == ord('j') or userInput == ord('J'):
			if yCoord< (submissionsNumberLimit*5-screenMaxY+3) :
				yCoord = yCoord+1
		elif userInput == curses.KEY_UP or userInput == ord('k') or userInput == ord('K'):
			if yCoord>0 :
				yCoord = yCoord-1

		elif userInput == ord('o') or userInput == ord('O') :
			# I got nothing, it's just close to M

			subMode = selectMode(standardScreen, screenMaxY, screenMaxX)
			titleWin.addstr(1,screenMaxX-16,"               ")
			titleWin.addstr(1,screenMaxX-16,"Loading "+subMode)
			titleWin.refresh()

			if subMode == "hot":
				submissions = reddit.get_subreddit(currentSubreddit).get_hot(limit=submissionsNumberLimit)
			elif subMode == "rising": 
				submissions = reddit.get_subreddit(currentSubreddit).get_rising(limit=submissionsNumberLimit)
			elif subMode == "new": 
				submissions = reddit.get_subreddit(currentSubreddit).get_new(limit=submissionsNumberLimit)

			elif subMode == "top-hr": 
				submissions = reddit.get_subreddit(currentSubreddit).get_top_from_hour(limit=submissionsNumberLimit)
			elif subMode == "top-dy": 
				submissions = reddit.get_subreddit(currentSubreddit).get_top_from_day(limit=submissionsNumberLimit)
			elif subMode == "top-wk": 
				submissions = reddit.get_subreddit(currentSubreddit).get_top_from_week(limit=submissionsNumberLimit)
			elif subMode == "top-mn": 
				submissions = reddit.get_subreddit(currentSubreddit).get_top_from_month(limit=submissionsNumberLimit)
			elif subMode == "top-yr": 
				submissions = reddit.get_subreddit(currentSubreddit).get_top_from_year(limit=submissionsNumberLimit)
			elif subMode == "top-al": 
				submissions = reddit.get_subreddit(currentSubreddit).get_top_from_all(limit=submissionsNumberLimit)

			elif subMode == "con-hr": 
				submissions = reddit.get_subreddit(currentSubreddit).get_controversial_from_hour(limit=submissionsNumberLimit)
			elif subMode == "con-dy": 
				submissions = reddit.get_subreddit(currentSubreddit).get_controversial_from_day(limit=submissionsNumberLimit)
			elif subMode == "con-wk": 
				submissions = reddit.get_subreddit(currentSubreddit).get_controversial_from_week(limit=submissionsNumberLimit)
			elif subMode == "con-mn": 
				submissions = reddit.get_subreddit(currentSubreddit).get_controversial_from_month(limit=submissionsNumberLimit)
			elif subMode == "con-yr": 
				submissions = reddit.get_subreddit(currentSubreddit).get_controversial_from_year(limit=submissionsNumberLimit)
			elif subMode == "con-al": 
				submissions = reddit.get_subreddit(currentSubreddit).get_controversial_from_all(limit=submissionsNumberLimit)

			else :
				subMode = "hot"
				submissions = reddit.get_subreddit(currentSubreddit).get_hot(limit=submissionsNumberLimit)



			titleWin.addstr(1,screenMaxX-16,"               ")
			titleWin.addstr(1,screenMaxX-8,subMode)
			needRepaint = True

		elif userInput == ord('m') or userInput == ord('M') :
			# M for 'more', type number of a submission to read it
			submissionToOpen = standardScreen.getstr()
			#TODO : use something a bit more sophisticated than getstr()
			#return str(int(submissionToOpen))
			try :
				if int(submissionToOpen)<submissionsNumberLimit:
					titleWin.addstr(1, screenMaxX-15, "              ")
					titleWin.addstr(1, screenMaxX-15, "Loading no"+str(int(submissionToOpen)))
					titleWin.refresh()
					submissionToOpenURL = currentSubmissions[int(submissionToOpen)].permalink
					displayComments(standardScreen, screenMaxY, screenMaxX, reddit, submissionToOpenURL, titleWin, submissionsPad, currentSubreddit, submissionsNumberLimit, subMode)
					needRepaint=True
			except ValueError :
				pass
	
		elif userInput == ord('q') or userInput == ord('Q') :
			break


			


appVersion = 'v1'

reddit = praw.Reddit(user_agent='PCURB:'+appVersion+' (by /u/m00nnsplit)')
errorType = curses.wrapper(main, reddit)

if errorType == "help" :
	print("ncurses & PRAW -based console reddit browser in Python 3")
	print("pass subreddit name as argument")
	print("please read "+getcwd()+"/readme file for more details")
	exit()
elif errorType == None :
	pass
else :
	print("error : "+errorType)
	exit()
